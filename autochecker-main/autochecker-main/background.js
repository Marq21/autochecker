const owner = "Marq21";
const repo = "autochecker";
const GITHUB_API_URL = `https://api.github.com/repos/${owner}/${repo}/releases/latest`;

// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –∏–∑ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
const currentVersion = chrome.runtime.getManifest().version;

async function checkForUpdate() {
  try {
    const response = await fetch(GITHUB_API_URL);
    const release = await response.json();

    if (release.tag_name && isNewerVersion(release.tag_name, currentVersion)) {
      console.log(`üì¶ –î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: ${release.tag_name}`);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
      if (chrome.storage && chrome.storage.local) {
        await chrome.storage.local.set({ 
          updateAvailable: true,
          latestVersion: release.tag_name,
          downloadUrl: release.zipball_url,
          releaseBody: release.body || "–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å."
        });
      } else {
        console.warn("‚ùå chrome.storage –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å.");
        globalThis.updateAvailable = true;
        globalThis.latestVersion = release.tag_name;
        globalThis.downloadUrl = release.zipball_url;
        globalThis.releaseBody = release.body || "–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å.";
      }
    } else {
      console.log("üîÑ –ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.");
      if (chrome.storage && chrome.storage.local) {
        await chrome.storage.local.set({ updateAvailable: false });
      } else {
        globalThis.updateAvailable = false;
      }
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", error);
  }
}

function isNewerVersion(remote, current) {
  const cleanRemote = remote.replace(/^v/, '');
  const cleanCurrent = current.replace(/^v/, '');

  const rParts = cleanRemote.split('.').map(Number);
  const cParts = cleanCurrent.split('.').map(Number);

  const maxLength = Math.max(rParts.length, cParts.length);

  for (let i = 0; i < maxLength; i++) {
    const r = rParts[i] || 0;
    const c = cParts[i] || 0;

    if (r > c) return true;
    if (r < c) return false;
  }

  return false;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
setInterval(checkForUpdate, 30 * 60 * 1000);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
checkForUpdate();